local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "moma hub",
    Icon = 0,
    LoadingTitle = "moma hub loading",
    LoadingSubtitle = "by moma1133222",
    Theme = "Default",
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
 
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = "moma hub"
    },
 
    Discord = {
       Enabled = false,
       Invite = "noinvitelink",
       RememberJoins = true
    },
 
    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Main stuff")

Rayfield:Notify({
    Title = "Follow me please",
    Content = "my script blox moma1133222",
    Duration = 6.5,
    Image = 4483362458,
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Packages = ReplicatedStorage:WaitForChild("Packages")
local Knit = Packages:WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit")
local TrainService = Knit.Services:WaitForChild("TrainService")
local RE = TrainService:WaitForChild("RE")
local Train = RE:WaitForChild("Train")

local isActive = false
local trainLoop

local function startTrainLoop()
    trainLoop = coroutine.create(function()
        while isActive do
            Train:FireServer()
            wait(0)
        end
    end)
    coroutine.resume(trainLoop)
end

local function stopTrainLoop()
    isActive = false
    if trainLoop then
        coroutine.close(trainLoop)
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Train",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        isActive = Value
        if isActive then
            startTrainLoop()
        else
            stopTrainLoop()
        end
    end,
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Packages = ReplicatedStorage:WaitForChild("Packages")
local Knit = Packages:WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit")
local RebirthService = Knit.Services:WaitForChild("RebirthService")
local RF = RebirthService:WaitForChild("RF")
local Rebirth = RF:WaitForChild("Rebirth")

local isActive = false
local rebirthLoop

local function startRebirthLoop()
    rebirthLoop = coroutine.create(function()
        while isActive do
            Rebirth:InvokeServer()
            wait(0.1)
        end
    end)
    coroutine.resume(rebirthLoop)
end

local function stopRebirthLoop()
    isActive = false
    if rebirthLoop then
        coroutine.close(rebirthLoop)
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "ToggleRebirth",
    Callback = function(Value)
        isActive = Value
        if isActive then
            startRebirthLoop()
        else
            stopRebirthLoop()
        end
    end,
})

local isLooping = false
local loopConnection

local Toggle = Tab:CreateToggle({
    Name = "Spam attack(op if lots of power)",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            isLooping = true
            loopConnection = game:GetService("RunService").Stepped:Connect(function()
                if isLooping then
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("FightService"):WaitForChild("RE"):WaitForChild("SkillAttack"):FireServer()
                else
                    loopConnection:Disconnect()
                end
            end)
        else
            isLooping = false
            if loopConnection then
                loopConnection:Disconnect()
            end
        end
    end,
})

local isLooping = false
local loopConnection

local function attack()
    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("FightService"):WaitForChild("RE"):WaitForChild("Attack"):FireServer()
    print("Attack fired!")
end

local Toggle = Tab:CreateToggle({
    Name = "spam attack(more op than 1st)",
    CurrentValue = false,
    Flag = "ToggleAttack",
    Callback = function(Value)
        if Value then
            isLooping = true
            
            loopConnection = game:GetService("RunService").Stepped:Connect(function()
                if isLooping then
                    attack()
                    wait(1)
                end
            end)
        else
            isLooping = false
            if loopConnection then
                loopConnection:Disconnect()
                loopConnection = nil
            end
        end
    end,
})

local replicatedStorage = game:GetService("ReplicatedStorage")
local itemCrateService = replicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("ItemCrateService"):WaitForChild("RE"):WaitForChild("UnboxCrate")
local onlineRewardService = replicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("OnlineRewardService"):WaitForChild("RF"):WaitForChild("ClaimOnlineQuestReward")

local args = {
    [1] = "Crate_1"
}

local isLooping = false
local loopConnection

local Toggle = Tab:CreateToggle({
    Name = "Open Crates(gear - u wont see open animation OP)",
    CurrentValue = false,
    Flag = "ToggleOpenCrates",
    Callback = function(Value)
        if Value then
            isLooping = true
            
            loopConnection = game:GetService("RunService").Stepped:Connect(function()
                if isLooping then
                    itemCrateService:FireServer(unpack(args))
                    onlineRewardService:InvokeServer()
                    wait(1)
                end
            end)
        else
            isLooping = false
            if loopConnection then
                loopConnection:Disconnect()
                loopConnection = nil
            end
        end
    end,
})

local replicatedStorage = game:GetService("ReplicatedStorage")
local chestService = replicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("ClaimDailyChest")

local isActive = false
local chestLoop

local function startChestLoop()
    chestLoop = coroutine.create(function()
        local maxIterations = 1000000000
        local batchSize = 1000
        local delayTime = 0.01

        for i = 1, maxIterations, batchSize do
            if not isActive then break end
            for j = 1, batchSize do
                chestService:InvokeServer()
            end
            wait(delayTime)
        end
    end)
    coroutine.resume(chestLoop)
end

local function stopChestLoop()
    isActive = false
    if chestLoop then
        coroutine.close(chestLoop)
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Claim Daily Chest(spam)",
    CurrentValue = false,
    Flag = "ToggleClaimChest",
    Callback = function(Value)
        isActive = Value
        if isActive then
            startChestLoop()
        else
            stopChestLoop()
        end
    end,
})

local Paragraph = Tab:CreateParagraph({Title = "Explain Claim Daily Chest(spam)", Content = "It will spam daily chest u will get 1b power and OP pets"})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function teleportTo(position)
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(position)
        print("Player teleported to: " .. tostring(position))
    else
        print("Character not found or HumanoidRootPart missing.")
    end
end

local teleportLocations = {
    ["Gold machine"] = Vector3.new(710, 817, 1291),
    ["Titanic machine"] = Vector3.new(885, 818, 1203)
}

local Dropdown = Tab:CreateDropdown({
    Name = "machines",
    Options = {"Gold machine", "Titanic machine"},
    CurrentOption = {"Gold machine"},
    MultipleOptions = false,
    Flag = "DropdownTeleport",
    Callback = function(Options)
        local selectedLocation = Options[1]
        local position = teleportLocations[selectedLocation]
        if position then
            teleportTo(position)
        else
            print("Invalid location selected.")
        end
    end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function teleportTo(position)
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(position)
        print("Player teleported to: " .. tostring(position))
    else
        print("Character not found or HumanoidRootPart missing.")
    end
end

local teleportLocations = {
    ["400x"] = Vector3.new(818, 829, 1054),
    ["150x"] = Vector3.new(610, 818, 1172),
    ["200x"] = Vector3.new(624, 822, 934),
    ["300%"] = Vector3.new(894, 819, 1419)
}

local Dropdown = Tab:CreateDropdown({
    Name = "Power zones",
    Options = {"400x", "150x", "200x", "300%"},
    CurrentOption = {"400x"},
    MultipleOptions = false,
    Flag = "DropdownZones",
    Callback = function(Options)
        local selectedLocation = Options[1]
        local position = teleportLocations[selectedLocation]
        if position then
            teleportTo(position)
        else
            print("Invalid location selected.")
        end
    end,
})
