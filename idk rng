-----------------------------------
-- RAYFIELD SETUP (Shared for All)
-----------------------------------
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "moma hub - idk rng",
    Icon = 0,
    LoadingTitle = "Loading..",
    LoadingSubtitle = "by moma1133222",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "momahub", -- now saved as a string
       FileName = "moma hub"
    },
    Discord = {
       Enabled = false,
       Invite = "https://discord.gg/S2KXT2GsEw",
       RememberJoins = false
    },
    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
})

-----------------------------------
-- BLACKLIST CHECK (Kicks Player)
-----------------------------------
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local blacklist = {
    5080636767,  -- Existing blacklisted UserId
    1273962566,  -- Newly added UserId
    7997266952   -- Newly added UserId
}
local customMessage = "You are blacklisted from using this script. Appeal by adding my discord: moma1133222"

local function isBlacklisted(id)
    for _, bannedId in ipairs(blacklist) do
        if bannedId == id then
            return true
        end
    end
    return false
end

if isBlacklisted(localPlayer.UserId) then
    localPlayer:Kick(customMessage)
    return
end

---------------------------------------------------
-- EXECUTION LOGGER & PLAYER STATS WEBHOOK
---------------------------------------------------
local HttpService = game:GetService("HttpService")
local webhookURL = "https://discordapp.com/api/webhooks/1341263812862541855/MHLtrVgcDUUnq5V5mkBvakJJrpfXwC9uk204K6ZnHDqIEKRpUQ0WtoWPIo5TOjNNj9QC"

local counterFile = "execution_count_" .. localPlayer.UserId .. ".txt"
local executionCount = 0

pcall(function()
    if isfile and isfile(counterFile) then
        executionCount = tonumber(readfile(counterFile)) or 0
    end
    executionCount = executionCount + 1
    if writefile then
        writefile(counterFile, tostring(executionCount))
    end
end)

local function getTimestamp()
    return os.date("!%Y-%m-%dT%H:%M:%SZ")
end

local function sendStatsWebhook()
    if webhookURL == "" then
        return
    end

    local auraInvCap, donation, highestRNG, money, playTime, rolls, autoCraftVal = "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A"

    pcall(function()
        local visibleData = localPlayer:FindFirstChild("VisibleData")
        if visibleData then
            if visibleData:FindFirstChild("AuraInventoryCapacity") then
                local val = tonumber(visibleData.AuraInventoryCapacity.Value)
                auraInvCap = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("Donation") then
                local val = tonumber(visibleData.Donation.Value)
                donation = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("HighestRNG") then
                local val = tonumber(visibleData.HighestRNG.Value)
                highestRNG = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("Money") then
                local val = tonumber(visibleData.Money.Value)
                money = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("PlayTime") then
                local seconds = tonumber(visibleData.PlayTime.Value)
                if seconds and seconds > 0 then
                    playTime = string.format("%.2f hours", seconds / 3600)
                else
                    playTime = "N/A"
                end
            end
        end

        local leaderstats = localPlayer:FindFirstChild("leaderstats")
        if leaderstats and leaderstats:FindFirstChild("Rolls") then
            local val = tonumber(leaderstats.Rolls.Value)
            rolls = val and tostring(val) or "N/A"
        end

        local autoCraftObj = localPlayer:FindFirstChild("AutoCraft")
        if autoCraftObj and autoCraftObj:IsA("ValueBase") then
            autoCraftVal = tostring(autoCraftObj.Value)
        end
    end)

    local data = {
        username = "moma hub webhooks",
        avatar_url = "https://cdn.discordapp.com/avatars/1335683455471718412/a_dd829b3d91ebd074581b2719dd020ba4.gif?size=1024",
        embeds = {
            {
                title = "Player Stats & Execution Log",
                description = string.format("Stats for **%s**", localPlayer.Name),
                color = 3447003,
                fields = {
                    { name = "Execution Count", value = tostring(executionCount), inline = true },
                    { name = "Aura Inv. Capacity", value = auraInvCap, inline = true },
                    { name = "Donation", value = donation, inline = true },
                    { name = "Highest RNG", value = highestRNG, inline = true },
                    { name = "Money", value = money, inline = true },
                    { name = "PlayTime", value = playTime, inline = true },
                    { name = "Rolls", value = rolls, inline = true },
                    { name = "AutoCraft", value = autoCraftVal, inline = true },
                },
                footer = {
                    text = "Powered by moma hub"
                },
                timestamp = getTimestamp()
            }
        }
    }

    local jsonData = HttpService:JSONEncode(data)
    local requestFunc = (syn and syn.request) or (http and http.request) or request
    if requestFunc then
        pcall(function()
            requestFunc({
                Url = webhookURL,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = jsonData
            })
        end)
    end
end

sendStatsWebhook()

---------------------------------------------------
-- CONFIGURATION (for Webhook & Options)
---------------------------------------------------
local webhookURL_Config = ""
local selectedPotions = {}
local selectedBiomes = {}
local usePotionsOnlyAtGlitch = false
local displayStatsActive = false

-------------------------------
-- UPDATE LOG TAB
-------------------------------
local TabUpdate = Window:CreateTab("Update Log", 4483362458)
local SectionUpdate = TabUpdate:CreateSection("")

local UpdateParagraph = TabUpdate:CreateParagraph({
    Title = "Update Log",
    Content = "What's New?\n" ..
              "• Auto Brew\n" ..
              "• Anti Lag, Walk on Water, and Delete Stuff (in MIC)\n" ..
              "• Glove Switcher\n" ..
              "• Replaced Teleport Farm with Tween (if you prefer the old version, DM me and I'll add it back)\n" ..
              "• Join my Discord Server: moma1133222 (For safety, only trusted users are allowed)"
})

local SectionUpdate2 = TabUpdate:CreateSection("")

local ToDoParagraph = TabUpdate:CreateParagraph({
    Title = "To Do:",
    Content = "• Aura Webhook\n" ..
              "• Fun Tab\n" ..
              "• More improvements and features...\n" ..
              "• Additional ideas – DM me on Discord: moma1133222"
})

-------------------------------
-- MAIN (AutoFarm/Collect/Obby) TAB
-------------------------------
local TabMain = Window:CreateTab("Auto farms", 4483362458)
local SectionMain = TabMain:CreateSection("Auto farm")
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
repeat task.wait() until character:FindFirstChild("HumanoidRootPart")
local rootPart = character:FindFirstChild("HumanoidRootPart")
local TweenService = game:GetService("TweenService")
local humanoid = character:FindFirstChildOfClass("Humanoid")

------------------------------------------------
-- Auto Collect Potion/Gold (Tween)
------------------------------------------------
local autoCollectTween = false
local ToggleCollectTween = TabMain:CreateToggle({
    Name = "Auto Collect Potion/Gold (Tween)",
    CurrentValue = false,
    Flag = "AutoCollectTween",
    Callback = function(Value)
        autoCollectTween = Value
        if autoCollectTween then
            spawn(function()
                while autoCollectTween do
                    local objectsFolder = workspace:FindFirstChild("NaturalIemSpawn")
                    if objectsFolder then
                        local items = objectsFolder:FindFirstChild("Objects")
                        if items and #items:GetChildren() > 0 then
                            local collectible = items:GetChildren()[1]
                            if collectible and collectible:IsA("BasePart") then
                                for _, part in ipairs(character:GetDescendants()) do
                                    if part:IsA("BasePart") then
                                        part.CanCollide = false
                                    end
                                end
                                local targetCFrame = collectible.CFrame + Vector3.new(0, 3, 0)
                                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = targetCFrame})
                                tween:Play()
                                tween.Completed:Wait()
                                local prompt = collectible:FindFirstChildWhichIsA("ProximityPrompt", true)
                                if prompt then
                                    fireproximityprompt(prompt)
                                end
                            end
                        end
                    end
                    wait(1)
                end
            end)
        end
    end,
})


------------------------------------------------
-- Seat
------------------------------------------------
local RemoveSeatsButton = TabMain:CreateButton({
    Name = "Remove Seats - needed for auto collect",
    Callback = function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("Seat") then
                obj:Destroy()
            end
        end
    end,
})
------------------------------------------------
-- Auto Obby Luck (Instant Teleport)
------------------------------------------------
local obbyLuck = workspace:FindFirstChild("Obby Luck Platform")
local canTeleport = false
local teleportCooldown = false
local ToggleObby = TabMain:CreateToggle({
    Name = "Auto Obby Luck",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        canTeleport = Value
        if not canTeleport then
            teleportCooldown = false
        end
    end,
})
local function teleportToBox()
    if canTeleport and not teleportCooldown and obbyLuck then
        local model = obbyLuck:FindFirstChild("Model")
        if model then
            local box = model:FindFirstChild("Box")
            if box and box:IsA("BasePart") then
                local prompt = box:FindFirstChild("ProximityPrompt")
                if prompt then
                    rootPart.CFrame = box.CFrame + Vector3.new(0, 3, 0)
                    task.wait(0.5)
                    fireproximityprompt(prompt)
                    teleportCooldown = true
                    task.wait(60)
                    teleportCooldown = false
                end
            end
        end
    end
end
game:GetService("RunService").Stepped:Connect(function()
    if canTeleport and not teleportCooldown then
        teleportToBox()
    end
end)


------------------------------------------------
-- AutoFarm Boosts (Instant Teleport)
------------------------------------------------
local autoFarm = false
local ToggleAutoFarm = TabMain:CreateToggle({
    Name = "AutoFarm Boosts - Might not work for every executor",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        autoFarm = Value
    end,
})
task.spawn(function()
    while true do
        if autoFarm then
            local obbyLuck = workspace:FindFirstChild("Obby Luck Platform")
            if obbyLuck then
                local model = obbyLuck:FindFirstChild("Model")
                if model then
                    local box = model:FindFirstChild("Box")
                    if box and box:IsA("BasePart") then
                        local prompt = box:FindFirstChild("ProximityPrompt")
                        if prompt then
                            rootPart.CFrame = box.CFrame + Vector3.new(0, 3, 0)
                            task.wait(0.1)
                            for i = 1, 10 do
                                fireproximityprompt(prompt)
                                task.wait(0.01)
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.5)
    end
end)


-----------------------------------
-- GUIS
-----------------------------------

local TabGUIS = Window:CreateTab("GUIS", 4483362458)

local ButtonMerchantBuy = TabGUIS:CreateButton({
    Name = "Enable Merchant Buy Screen(only works if merchant spawned)",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local merchantUI = playerGui:FindFirstChild("VioletBuyGUI")
        if merchantUI then
            merchantUI.Enabled = true
        else
            warn("VioletBuyGUI not found. It may not have spawned yet.")
        end
    end,
})

local ButtonPotionCrafting = TabGUIS:CreateButton({
    Name = "Enable Potion Crafting",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local potionUI = playerGui:FindFirstChild("CraftingWitch")
        if potionUI then
            potionUI.Enabled = true
        else
            warn("CraftingWitch not found.")
        end
    end,
})

local ButtonGloveCrafting = TabGUIS:CreateButton({
    Name = "Enable Glove Crafting",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local gloveUI = playerGui:FindFirstChild("Crafting")
        if gloveUI then
            gloveUI.Enabled = true
        else
            warn("Crafting not found.")
        end
    end,
})


-----------------------------------
-- Glove Switcher
-----------------------------------

local TabUpdate = Window:CreateTab("Glove Switcher", 4483362458)
TabUpdate:CreateSection("")


local Paragraph = TabUpdate:CreateParagraph({
    Title = "How it works",
    Content = "You must own the Cybernetic Gauntlet, which is obtained by completing Arion’s three-part quest. Whenever you reach 8 rolls, the script automatically equips the Cybernetic Gauntlet to gain the double luck bonus, then switches back to your original glove. Be sure to select the correct arm (left or right), and make sure you actually own the glove you’re switching to—otherwise, the script won’t work as intended."
})

-----------------------------------
-- Toggles
-----------------------------------
local autoRightArmSwitch = false
local autoLeftArmSwitch = false

TabUpdate:CreateToggle({
    Name = "Auto Right Arm Switch",
    CurrentValue = false,
    Flag = "AutoRightArmSwitch",
    Callback = function(Value)
        autoRightArmSwitch = Value
    end,
})

TabUpdate:CreateToggle({
    Name = "Auto Left Arm Switch",
    CurrentValue = false,
    Flag = "AutoLeftArmSwitch",
    Callback = function(Value)
        autoLeftArmSwitch = Value
    end,
})

-----------------------------------
-- Glove Detection in Equipment
-----------------------------------
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local equipmentFolder = player:WaitForChild("Equipment", 5)

-- Reads the StringValue for a given arm to get the current glove name
local function getCurrentArmItem(armName)
    if equipmentFolder then
        local armObject = equipmentFolder:FindFirstChild(armName)
        if armObject and armObject:IsA("StringValue") then
            return armObject.Value  -- e.g. "Angelic Device"
        end
    end
    return nil
end

-- Remote call to switch a glove
local function switchGlove(armName, gloveName)
    local args = { gloveName, armName }
    game:GetService("ReplicatedStorage")
        :WaitForChild("GetRemoteEvents")
        :WaitForChild("Backpack")
        :WaitForChild("Interact")
        :FireServer(unpack(args))
end

-----------------------------------
-- LuckBar
-----------------------------------
local luckBar = player:WaitForChild("PlayerGui")
                     :WaitForChild("Main")
                     :WaitForChild("Rolling")
                     :WaitForChild("RollButton")
                     :WaitForChild("LuckBar")

-----------------------------------
-- Main Loop
-----------------------------------
local lastRoll = nil

spawn(function()
    while task.wait(0.1) do
        local text = luckBar.Text
        local currentRollStr = text:match("%[(%d+)%/")
        if currentRollStr then
            local currentRoll = tonumber(currentRollStr)
            -- Only trigger on the rising edge when roll == 8
            if currentRoll == 8 and lastRoll ~= 8 then
                -- Right Arm
                if autoRightArmSwitch then
                    spawn(function()
                        local originalRight = getCurrentArmItem("Right Arm")
                        if originalRight then
                            switchGlove("Right Arm", "Cybernetic Gauntlet")
                            task.wait(2)
                            switchGlove("Right Arm", originalRight)
                        end
                    end)
                end

                -- Left Arm
                if autoLeftArmSwitch then
                    spawn(function()
                        local originalLeft = getCurrentArmItem("Left Arm")
                        if originalLeft then
                            switchGlove("Left Arm", "Cybernetic Gauntlet")
                            task.wait(2)
                            switchGlove("Left Arm", originalLeft)
                        end
                    end)
                end
            end
            lastRoll = currentRoll
        end
    end
end)


--------------------------------------------------------------------------------
-- Create your "Auto brew" tab:
--------------------------------------------------------------------------------
local TabGUIS = Window:CreateTab("Auto brew", 4483362458)

--------------------------------------------------------------------------------
-- 1) Create a toggle to Auto Brew all selected potions (placed at the top)
--------------------------------------------------------------------------------
local autoBrew = false
local selectedPotions = {}  -- This will store the toggled-on potions

TabGUIS:CreateToggle({
    Name = "Auto Brew",
    CurrentValue = false,
    Callback = function(state)
        autoBrew = state
        
        if autoBrew then
            spawn(function()
                while autoBrew do
                    -- Only brew if there's at least one potion selected
                    if #selectedPotions > 0 then
                        for _, potionName in ipairs(selectedPotions) do
                            local args = {"Potions", potionName}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("GetRemoteEvents")
                                :WaitForChild("Crafting")
                                :WaitForChild("Craft")
                                :InvokeServer(unpack(args))
                            
                            wait(0.05)  -- Adjust delay as needed
                        end
                    else
                        wait(0.05)
                    end
                end
            end)
        end
    end
})

--------------------------------------------------------------------------------
-- 2) Gather all potion names from ReplicatedStorage and create toggles for each
--------------------------------------------------------------------------------
local potionsFolder = game:GetService("ReplicatedStorage").Meta.Craftables.Potions

for _, potion in ipairs(potionsFolder:GetChildren()) do
    local potionName = potion.Name
    
    TabGUIS:CreateToggle({
        Name = potionName,
        CurrentValue = false,
        Callback = function(isSelected)
            if isSelected then
                -- Add potion to selectedPotions if toggled on
                table.insert(selectedPotions, potionName)
            else
                -- Remove potion if toggled off
                for i, v in ipairs(selectedPotions) do
                    if v == potionName then
                        table.remove(selectedPotions, i)
                        break
                    end
                end
            end
        end
    })
end

------------------------------------
-- FREE STUFF TAB
------------------------------------
local TabFree = Window:CreateTab("FREE STUFF", 4483362458)
local SectionFree = TabFree:CreateSection("FREE STUFF")

-- Define the player variable
local player = game:GetService("Players").LocalPlayer

local function createGamepass(name)
    local gamepassesFolder = player:FindFirstChild("Gamepasses")
    if not gamepassesFolder then
        gamepassesFolder = Instance.new("Folder")
        gamepassesFolder.Name = "Gamepasses"
        gamepassesFolder.Parent = player
    end
    local gamepass = gamepassesFolder:FindFirstChild(name)
    if not gamepass then
        gamepass = Instance.new("BoolValue")
        gamepass.Name = name
        gamepass.Parent = gamepassesFolder
    end
    gamepass.Value = true
end

local ButtonQuickRoll = TabFree:CreateButton({
    Name = "Enable QuickRoll",
    Callback = function()
        createGamepass("QuickRoll")
    end,
})

-- Fixed: Using TabFree instead of Tab here
local Paragraph = TabFree:CreateParagraph({
    Title = "Note",
    Content = "Only QuickRoll works; VIP, 2x Money, and the glove options are just visual."
})

local ButtonVIP = TabFree:CreateButton({
    Name = "Enable VIP",
    Callback = function()
        createGamepass("VIP")
    end,
})

local ButtonMoney = TabFree:CreateButton({
    Name = "Enable 2x Money",
    Callback = function()
        createGamepass("Money")
    end,
})

-- Dynamically build glove options from ReplicatedStorage.Meta.Gear
local gearFolder = game:GetService("ReplicatedStorage").Meta.Gear
local gloveOptions = {}
for _, gear in ipairs(gearFolder:GetChildren()) do
    table.insert(gloveOptions, gear.Name)
end

local function equipGlove(arm, gloveName)
    local equipmentFolder = player:FindFirstChild("Equipment")
    if equipmentFolder then
        local armSlot = equipmentFolder:FindFirstChild(arm)
        if armSlot then
            armSlot.Value = gloveName
        end
    end
end

local LeftGloveDropdown = TabFree:CreateDropdown({
    Name = "Left Glove",
    Options = gloveOptions,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "LeftGlove",
    Callback = function(option)
        if option and #option > 0 then
            equipGlove("Left Arm", option[1])
        end
    end,
})

local RightGloveDropdown = TabFree:CreateDropdown({
    Name = "Right Glove",
    Options = gloveOptions,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "RightGlove",
    Callback = function(option)
        if option and #option > 0 then
            equipGlove("Right Arm", option[1])
        end
    end,
})


-----------------------------------
-- TESTING TAB (Multi-Craft UI)
-----------------------------------
local TabTesting = Window:CreateTab("Multi Crafting", 4483362458)

local HowToUseParagraph = TabTesting:CreateParagraph({
    Title = "How to Use",
    Content = [[
1: Select what potion you want to multi craft.
2: After, make sure you choose the right auras (I recommend only using high tiers, no low tiers).
3: Go to settings.
4: Aura Filter.
5: Make sure the auras you need for the potions are set as "keep".
And you're done!
]]
})

-- (Reuse our global player & potionsFolder from above)
local potionsFolder = localPlayer:WaitForChild("Crafting"):WaitForChild("Potions")
local potionNames = {}
for _, potionFolder in ipairs(potionsFolder:GetChildren()) do
    table.insert(potionNames, potionFolder.Name)
end

-- Reset global selections for multi-craft
_G.SelectedPotions = {}
_G.SelectedAuras = {}
local potionsUI = {}    -- Table for dynamic UI elements
local multiCraftToggle   -- Reference for the toggle UI element
local multiCraftActive = false

-----------------------------------
-- REMOTE FUNCTION TO ADD AURA (Multi-Craft)
-----------------------------------
local function addAuraItemCraft(potionName, auraName)
    local args = {
        [1] = "Potions",
        [2] = potionName,
        [3] = "Aura",
        [4] = auraName,
        [5] = 1
    }
    local addItemRemote = game:GetService("ReplicatedStorage")
        :WaitForChild("GetRemoteEvents")
        :WaitForChild("Crafting")
        :WaitForChild("AddItem")
    pcall(function()
        addItemRemote:InvokeServer(unpack(args))
    end)
end

-----------------------------------
-- FUNCTION: Create Multi-Craft UI (10 slots by default)
-----------------------------------
local function createPotionsUI(count)
    -- Create the Multi-Craft toggle at the top
    multiCraftToggle = TabTesting:CreateToggle({
        Name = "Start Multi-Craft",
        CurrentValue = false,
        Callback = function(value)
            multiCraftActive = value
            if multiCraftActive then
                spawn(function()
                    while multiCraftActive do
                        for i = 1, count do
                            local chosenPotion = _G.SelectedPotions[i]
                            local chosenAuras  = _G.SelectedAuras[i] or {}
                            if chosenPotion and #chosenAuras > 0 then
                                for _, auraName in ipairs(chosenAuras) do
                                    addAuraItemCraft(chosenPotion, auraName)
                                    task.wait(0.1)
                                end
                            end
                        end
                        task.wait(0.5)
                    end
                end)
            end
        end
    })

    -- Create UI for each potion slot below the toggle
    for i = 1, count do
        local section = TabTesting:CreateSection("Potion #" .. i)
        local potionDropdown = TabTesting:CreateDropdown({
            Name = "Select Potion #" .. i,
            Options = potionNames,
            CurrentOption = {},
            MultipleOptions = false,
            Callback = function(option)
                if not option or #option == 0 then return end
                local chosenPotion = option[1]
                _G.SelectedPotions[i] = chosenPotion

                local potionFolder = potionsFolder:FindFirstChild(chosenPotion)
                if potionFolder then
                    local auraFolder = potionFolder:FindFirstChild("Aura")
                    if auraFolder then
                        local auraNames = {}
                        for _, auraItem in ipairs(auraFolder:GetChildren()) do
                            table.insert(auraNames, auraItem.Name)
                        end
                        if potionsUI[i] and potionsUI[i].aurasDropdown then
                            potionsUI[i].aurasDropdown:Refresh(auraNames, {})
                        end
                    else
                        Rayfield:Notify({
                            Title = "No Aura Folder",
                            Content = "This potion has no Aura folder.",
                            Duration = 5
                        })
                        if potionsUI[i] and potionsUI[i].aurasDropdown then
                            potionsUI[i].aurasDropdown:Refresh({}, {})
                        end
                    end
                else
                    Rayfield:Notify({
                        Title = "Potion Not Found",
                        Content = "Potion folder not found in LocalPlayer.Crafting.Potions",
                        Duration = 5
                    })
                    if potionsUI[i] and potionsUI[i].aurasDropdown then
                        potionsUI[i].aurasDropdown:Refresh({}, {})
                    end
                end
            end
        })
        local aurasDropdown = TabTesting:CreateDropdown({
            Name = "Select Auras (multi) for Potion #" .. i,
            Options = {},
            CurrentOption = {},
            MultipleOptions = true,
            Callback = function(option)
                _G.SelectedAuras[i] = option
            end
        })
        potionsUI[i] = {
            section = section,
            potionDropdown = potionDropdown,
            aurasDropdown = aurasDropdown
        }
    end
end

-----------------------------------
-- CREATE 10 MULTI-CRAFT SLOTS
-----------------------------------
createPotionsUI(10)




local Tab = Window:CreateTab("Merchant Auto-Buy", 4483362458)
local Section = Tab:CreateSection("Merchant")

------------------------------------
-- GLOBALS & DEFAULTS
------------------------------------
_G.PurchaseAmount = 0 -- fallback default
_G.AutoBuyEnabled = false

------------------------------------
-- TEXTBOX FOR PURCHASE AMOUNT
------------------------------------
Tab:CreateInput({
    Name = "Purchase Amount",
    PlaceholderText = "0",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local num = tonumber(text)
        if num then
            _G.PurchaseAmount = num
        else
            _G.PurchaseAmount = 10
        end
    end
})

------------------------------------
-- TOGGLE FOR AUTO-BUY ENABLE
------------------------------------
Tab:CreateToggle({
    Name = "Enable Auto-Buy",
    CurrentValue = false,
    Callback = function(value)
        _G.AutoBuyEnabled = value
    end
})

------------------------------------
-- BUYING FUNCTION (Remotes)
-- Using your specified arguments:
--  Left slot: 2
--  Next to left: 5
--  Middle: 1
--  Next to right: 3
--  Right slot: 4
------------------------------------
local function buyItemById(itemId)
    local merchantEvent = game:GetService("ReplicatedStorage")
        :WaitForChild("GetRemoteEvents")
        :WaitForChild("Merchants")
        :WaitForChild("BuyMerchantItem")
    pcall(function()
        merchantEvent:InvokeServer(itemId)
    end)
end

------------------------------------
-- AUTO-BUY LOOP
-- Checks the merchant every 2 seconds;
-- if active and auto-buy is enabled,
-- buys each slot _G.PurchaseAmount times,
-- then waits for merchant to disappear.
------------------------------------
spawn(function()
    while task.wait(2) do
        local success, stockData = pcall(function()
            return game:GetService("ReplicatedStorage")
                :WaitForChild("GetRemoteEvents")
                :WaitForChild("Merchants")
                :WaitForChild("GetCurrentStock")
                :InvokeServer()
        end)

        -- Only proceed if auto-buy is enabled
        if _G.AutoBuyEnabled and success and stockData and next(stockData) then
            -- Merchant is active
            for i = 1, _G.PurchaseAmount do
                buyItemById(2) -- Left slot
                task.wait(0.5)
                buyItemById(5) -- Next to left
                task.wait(0.5)
                buyItemById(1) -- Middle
                task.wait(0.5)
                buyItemById(3) -- Next to right
                task.wait(0.5)
                buyItemById(4) -- Right slot
                task.wait(0.5)
            end

            -- Now wait until the merchant is gone
            repeat
                task.wait(2)
                local s, d = pcall(function()
                    return game:GetService("ReplicatedStorage")
                        :WaitForChild("GetRemoteEvents")
                        :WaitForChild("Merchants")
                        :WaitForChild("GetCurrentStock")
                        :InvokeServer()
                end)
            until not (s and d and next(d)) or not _G.AutoBuyEnabled
        end
    end
end)


local infoParagraph = Tab:CreateParagraph({
    Title = "Auto-Buy Update",
    Content = "Sorry that I had to remove the old auto-buy—it was very glitchy. I'm still working on making it more reliable, but for now you can use this new version which auto-buys all the items for sale so you won't miss out on Stardust Potion I or II if you set it to 5. If you're a good scripter and wouldn't mind helping me out by adding my Discord (moma1133222), I'd really appreciate it since it's been very hard doing this alone."
})








-----------------------------------
-- WEBHOOKS & BIOME DETECTION TAB
-----------------------------------
local TabWebhook = Window:CreateTab("Webhooks", 4483362458)
local SectionWebhook = TabWebhook:CreateSection("Webhooks")


---------------------------------------------------
-- WEBHOOK FUNCTIONS & BIOME DETECTION (Integration)
---------------------------------------------------
local function getTimestampWebhook()
    return os.date("!%Y-%m-%dT%H:%M:%SZ")
end

-- Sends the biome embed.
local function sendBiomeWebhook(newBiome)
    if webhookURL == "" then
        warn("No webhook URL set! Please input a valid URL.")
        return
    end

    local contentMessage = ""
    if newBiome == "Glitch" then
        contentMessage = "@everyone"
    end

    local embedColor = 65280
    if newBiome == "Glitch" then
        embedColor = 16711680
    end

    local descriptionText = string.format("Player **%s** is now in the **%s** biome!", player.Name, newBiome)
    if privateServerLink and privateServerLink ~= "" then
        descriptionText = descriptionText .. "\nServer: " .. privateServerLink
    end

    local data = {
        username = "moma hub webhooks",
        avatar_url = "https://cdn.discordapp.com/avatars/1335683455471718412/a_dd829b3d91ebd074581b2719dd020ba4.gif?size=1024",
        content = contentMessage,
        embeds = {
            {
                title = "New Biome Detected!",
                description = descriptionText,
                color = embedColor,
                fields = {
                    { name = "Player", value = player.Name, inline = true },
                    { name = "Biome", value = newBiome, inline = true }
                },
                footer = { text = "Powered by moma hub" },
                timestamp = getTimestampWebhook()
            }
        }
    }

    local jsonData = HttpService:JSONEncode(data)
    local reqFunc = (syn and syn.request) or (http and http.request) or request
    if reqFunc then
        pcall(function()
            reqFunc({ Url = webhookURL, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = jsonData })
        end)
    else
        warn("HTTP request function not found!")
    end
end

-- Sends the player stats embed.
local function sendStatsWebhookWebhook()
    if webhookURL == "" then
        warn("No webhook URL set! Please input a valid URL.")
        return
    end

    local auraInvCap = "N/A"
    local donation = "N/A"
    local highestRNG = "N/A"
    local money = "N/A"
    local playTime = "N/A"
    local rolls = "N/A"
    local autoCraftVal = "N/A"

    pcall(function()
        local visibleData = player:WaitForChild("VisibleData")
        if visibleData:FindFirstChild("AuraInventoryCapacity") then
            local val = tonumber(visibleData.AuraInventoryCapacity.Value)
            auraInvCap = val and tostring(val) or "N/A"
        end
        if visibleData:FindFirstChild("Donation") then
            local val = tonumber(visibleData.Donation.Value)
            donation = val and tostring(val) or "N/A"
        end
        if visibleData:FindFirstChild("HighestRNG") then
            local val = tonumber(visibleData.HighestRNG.Value)
            highestRNG = val and tostring(val) or "N/A"
        end
        if visibleData:FindFirstChild("Money") then
            local val = tonumber(visibleData.Money.Value)
            money = val and tostring(val) or "N/A"
        end
        if visibleData:FindFirstChild("PlayTime") then
            local seconds = tonumber(visibleData.PlayTime.Value)
            if seconds and seconds > 0 then
                playTime = string.format("%.2f hours", seconds / 3600)
            else
                playTime = "N/A"
            end
        end

        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats and leaderstats:FindFirstChild("Rolls") then
            local val = tonumber(leaderstats.Roll.Value) or tonumber(leaderstats.Rolls.Value)
            rolls = val and tostring(val) or "N/A"
        end

        local autoCraftObj = player:FindFirstChild("AutoCraft")
        if autoCraftObj and autoCraftObj:IsA("ValueBase") then
            autoCraftVal = tostring(autoCraftObj.Value)
        end
    end)

    local data = {
        username = "moma hub webhooks",
        avatar_url = "https://cdn.discordapp.com/avatars/1335683455471718412/a_dd829b3d91ebd074581b2719dd020ba4.gif?size=1024",
        embeds = {
            {
                title = "Player Stats",
                description = string.format("Stats for **%s**", player.Name),
                color = 3447003,
                fields = {
                    { name = "Aura Inv. Capacity", value = auraInvCap, inline = true },
                    { name = "Donation", value = donation, inline = true },
                    { name = "Highest RNG", value = highestRNG, inline = true },
                    { name = "Money", value = money, inline = true },
                    { name = "PlayTime", value = playTime, inline = true },
                    { name = "Rolls", value = rolls, inline = true },
                    { name = "AutoCraft", value = autoCraftVal, inline = true },
                },
                footer = { text = "Powered by moma hub" },
                timestamp = getTimestampWebhook()
            }
        }
    }

    local jsonData = HttpService:JSONEncode(data)
    local reqFunc = (syn and syn.request) or (http and http.request) or request
    if reqFunc then
        pcall(function()
            reqFunc({ Url = webhookURL, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = jsonData })
        end)
    else
        warn("HTTP request function not found!")
    end
end

-------------------------------
-- RAYFIELD UI ELEMENTS (WEBHOOKS TAB)
-------------------------------
local WebhookURLInput = TabWebhook:CreateInput({
    Name = "Webhook URL",
    CurrentValue = "",
    PlaceholderText = "Enter your webhook URL",
    RemoveTextAfterFocusLost = false,
    Flag = "WebhookInput",
    Callback = function(Text) webhookURL = Text end,
})

local PrivateServerLinkInput = TabWebhook:CreateInput({
    Name = "Private Server Link",
    CurrentValue = "",
    PlaceholderText = "Enter your private server link",
    RemoveTextAfterFocusLost = false,
    Flag = "PrivateServerLink",
    Callback = function(Text) privateServerLink = Text end,
})

local SectionWebhook = TabWebhook:CreateSection("Biomes")

local BiomeDropdown = TabWebhook:CreateDropdown({
    Name = "Select Biomes",
    Options = {"Wind", "Snow", "Rainy", "Glitch", "Normal", "Astral"},
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "BiomeDropdown",
    Callback = function(Options) selectedBiomes = Options end,
})

local SectionWebhook = TabWebhook:CreateSection("Potion stuff")

local PotionDropdown = TabWebhook:CreateDropdown({
    Name = "Select Potions",
    Options = {
        "Stardust Potion I", "Stardust Potion II", 
        "Luck Potion III", "Luck Potion II", "Luck Potion", 
        "Fortune Potion II", "Fortune Potion", 
        "Haste Potion", "Haste Potion II"
    },
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "PotionDropdown",
    Callback = function(Options) selectedPotions = Options end,
})

local StardustIAmountInput = TabWebhook:CreateInput({
    Name = "Amount of Stardust Potion I to use",
    CurrentValue = "",
    PlaceholderText = "Enter number",
    RemoveTextAfterFocusLost = false,
    Flag = "StardustIAmountInput",
    Callback = function(Text) stardustPotionIAmount = tonumber(Text) or 0 end,
})

local StardustIIAmountInput = TabWebhook:CreateInput({
    Name = "Amount of Stardust Potion II to use",
    CurrentValue = "",
    PlaceholderText = "Enter number",
    RemoveTextAfterFocusLost = false,
    Flag = "StardustIIAmountInput",
    Callback = function(Text) stardustPotionIIAmount = tonumber(Text) or 0 end,
})

local PotionsGlitchToggle = TabWebhook:CreateToggle({
    Name = "Use Potions Only at Glitch",
    CurrentValue = false,
    Flag = "TogglePotionsGlitch",
    Callback = function(Value) usePotionsOnlyAtGlitch = Value end,
})

local StardustOnlyToggle = TabWebhook:CreateToggle({
    Name = "Use Potions Only at Astral",
    CurrentValue = false,
    Flag = "AstralStardustToggle",
    Callback = function(Value) useStardustOnlyAtStardust = Value end,
})

-------------------------------
-- BIOME DETECTION & AUTOMATION (WEBHOOKS TAB)
-------------------------------
spawn(function()
    local oldBiome
    while true do
        wait(1)
        local rawBiomeText = ""
        pcall(function() rawBiomeText = player.PlayerGui.Main.GearInventory.Money.Map.Biome.Text end)
        if rawBiomeText and rawBiomeText ~= "" then
            local newBiome = rawBiomeText:match("Biome:%s*([%w_]+)") or rawBiomeText
            if newBiome ~= oldBiome then
                if table.find(selectedBiomes, newBiome) then
                    if usePotionsOnlyAtGlitch and newBiome ~= "Glitch" then
                    else
                        if #selectedPotions > 0 then
                            for _, potion in ipairs(selectedPotions) do
                                if newBiome == "Glitch" and (potion == "Stardust Potion II" or potion == "Stardust Potion I") then
                                    spawn(function()
                                        wait(5)
                                        if potion == "Stardust Potion II" then
                                            for i = 1, stardustPotionIIAmount do
                                                local args = { [1] = potion, [2] = 1 }
                                                game:GetService("ReplicatedStorage")
                                                    :WaitForChild("GetRemoteEvents")
                                                    :WaitForChild("Backpack")
                                                    :WaitForChild("Interact")
                                                    :FireServer(unpack(args))
                                                wait(0.1)
                                            end
                                        elseif potion == "Stardust Potion I" then
                                            for i = 1, stardustPotionIAmount do
                                                local args = { [1] = potion, [2] = 1 }
                                                game:GetService("ReplicatedStorage")
                                                    :WaitForChild("GetRemoteEvents")
                                                    :WaitForChild("Backpack")
                                                    :WaitForChild("Interact")
                                                    :FireServer(unpack(args))
                                                wait(0.1)
                                            end
                                        end
                                    end)
                                else
                                    spawn(function()
                                        local args = { [1] = potion, [2] = 1 }
                                        game:GetService("ReplicatedStorage")
                                            :WaitForChild("GetRemoteEvents")
                                            :WaitForChild("Backpack")
                                            :WaitForChild("Interact")
                                            :FireServer(unpack(args))
                                    end)
                                end
                            end
                        end
                    end
                    sendBiomeWebhook(newBiome)
                end
                oldBiome = newBiome
            end
        end
    end
end)


local SectionWebhook = TabWebhook:CreateSection("Merchant")
-------------------------------
-- NEW: VIOLET SPAWN NOTIFICATION
-------------------------------
local function sendVioletSpawnWebhook(stock)
    if webhookURL == "" then
        warn("No webhook URL set! Please input a valid URL.")
        return
    end

    local descriptionText = "Violet has spawned with the following stock:\n" .. stock
    if privateServerLink and privateServerLink ~= "" then
        descriptionText = descriptionText .. "\nServer: " .. privateServerLink
    end

    local data = {
        username = "moma hub webhooks",
        avatar_url = "https://cdn.discordapp.com/avatars/1335683455471718412/a_dd829b3d91ebd074581b2719dd020ba4.gif?size=1024",
        embeds = {
            {
                title = "Violet Spawned!",
                description = descriptionText,
                color = 3447003,
                footer = { text = "Powered by moma hub" },
                timestamp = getTimestampWebhook()
            }
        }
    }

    local jsonData = HttpService:JSONEncode(data)
    local reqFunc = (syn and syn.request) or (http and http.request) or request
    if reqFunc then
        pcall(function()
            reqFunc({ Url = webhookURL, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = jsonData })
        end)
    end
end

local VioletSpawnToggle = TabWebhook:CreateToggle({
    Name = "Notify Violet Spawn",
    CurrentValue = false,
    Flag = "VioletSpawnNotify",
    Callback = function(Value) _G.VioletSpawnWebhookEnabled = Value end,
})

spawn(function()
    local notified = false
    while task.wait(1) do
        local success, stockData = pcall(function()
            return game:GetService("ReplicatedStorage")
                :WaitForChild("GetRemoteEvents")
                :WaitForChild("Merchants")
                :WaitForChild("GetCurrentStock")
                :InvokeServer()
        end)
        if success and stockData then
            local merchantActive = false
            local stockList = {}
            for _, itemInfo in pairs(stockData) do
                merchantActive = true
                if itemInfo.Display then
                    table.insert(stockList, itemInfo.Display)
                end
            end
            local stockMessage = table.concat(stockList, "\n")
            if merchantActive and stockMessage ~= "" and _G.VioletSpawnWebhookEnabled and not notified then
                sendVioletSpawnWebhook(stockMessage)
                notified = true
            end
        else
            notified = false
        end
    end
end)



-----------------------------------
-- MIC TAB (Miscellaneous Section)
-----------------------------------
local TabMic = Window:CreateTab("Mic", 4483362458)
local SectionMisc = TabMic:CreateSection("Miscellaneous")

-- Anti-AFK Toggle (enabled by default)
local antiAfkConnection = nil
local ToggleAntiAFK = TabMic:CreateToggle({
    Name = "Anti AFK",
    CurrentValue = true,
    Flag = "AntiAFKToggle",
    Callback = function(Value)
        if Value then
            local VirtualUser = game:GetService("VirtualUser")
            antiAfkConnection = game.Players.LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        else
            if antiAfkConnection then
                antiAfkConnection:Disconnect()
                antiAfkConnection = nil
            end
        end
    end,
})
-- Immediately trigger the callback to connect anti-AFK
ToggleAntiAFK.Callback(true)

-- Infinite Yield Button
local InfiniteYieldButton = TabMic:CreateButton({
    Name = "Execute Infinite Yield",
    Flag = "InfiniteYieldButton",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source"))()
    end,
})

TabMic:CreateButton({
    Name = "Anti Lag(only turn on when going afk or else u have to rejoin)",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/moma1133222/script/refs/heads/main/less%20lag"))()
    end
})

-----------------------------------
-- Walk on Water Toggle
-----------------------------------
local RunService = game:GetService("RunService")
local walkOnWaterActive = false
local waterPlatform
local waterFollowConnection
local platformOffset = 4.8  -- Increased offset; adjust this value if you need it higher or lower

TabMic:CreateToggle({
    Name = "Walk on Water",
    CurrentValue = false,
    Flag = "WalkOnWaterToggle",
    Callback = function(Value)
        walkOnWaterActive = Value
        if walkOnWaterActive then
            -- Create a huge invisible platform
            waterPlatform = Instance.new("Part")
            waterPlatform.Size = Vector3.new(2000, 1, 2000)  -- Adjust size as needed
            waterPlatform.Anchored = true
            waterPlatform.CanCollide = true
            waterPlatform.Transparency = 1
            waterPlatform.Name = "WaterPlatform"
            waterPlatform.Parent = workspace

            -- Continuously update the platform's position to follow the water part
            waterFollowConnection = RunService.Heartbeat:Connect(function()
                local daMap = workspace:FindFirstChild("da map")
                if daMap then
                    local water = daMap:FindFirstChild("wATER")
                    if water then
                        -- Position the platform above water (adding water's half-height and the platformOffset)
                        waterPlatform.Position = water.Position + Vector3.new(0, water.Size.Y/2 + platformOffset, 0)
                    end
                end
            end)
        else
            -- Turn off Walk on Water: disconnect the update and remove the platform
            if waterFollowConnection then
                waterFollowConnection:Disconnect()
                waterFollowConnection = nil
            end
            if waterPlatform then
                waterPlatform:Destroy()
                waterPlatform = nil
            end
        end
    end,
})

-----------------------------------
-- Delete Trees/Rocks/Mushrooms Button
-----------------------------------
local function deleteObjects()
    -- Delete objects in workspace.Weather
    local weather = workspace:FindFirstChild("Weather")
    if weather then
        local wood = weather:FindFirstChild("Wood")
        if wood then
            wood:Destroy()
        end
        
        local leafs = weather:FindFirstChild("Leafs")
        if leafs then
            leafs:Destroy()
        end
    end

    -- Delete specific objects in workspace["da map"]
    local daMap = workspace:FindFirstChild("da map")
    if daMap then
        for _, obj in ipairs(daMap:GetDescendants()) do
            if obj.Name == "Medium Rock1" 
            or obj.Name == "Small Rock" 
            or obj.Name == "SmallShroom" 
            or obj.Name == "Wood" then
                obj:Destroy()
            end
        end
    end
end

TabMic:CreateButton({
    Name = "Delete Trees/Rocks/Mushrooms",
    Callback = function()
        deleteObjects()
    end,
})

-----------------------------------
-- Global values for WalkSpeed and JumpPower
-----------------------------------
_G.WalkSpeed = 22
_G.JumpPower = 8

-- Walk Speed Slider
local SpeedSlider = TabMic:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 100},
    Increment = 1,
    CurrentValue = 22,
    Flag = "SpeedSlider",
    Callback = function(Value)
        _G.WalkSpeed = Value
    end,
})

-- Get the player's current jump power as default.
local defaultJumpPower = 8
local player = game.Players.LocalPlayer
if player.Character then
    local hum = player.Character:FindFirstChildOfClass("Humanoid")
    if hum then
        defaultJumpPower = hum.JumpPower
    end
end

-- Jump Power Slider (range set from 8 to 200 to allow lower than 50)
local JumpSlider = TabMic:CreateSlider({
    Name = "Jump Power",
    Range = {8, 200},
    Increment = 1,
    CurrentValue = defaultJumpPower,
    Flag = "JumpSlider",
    Callback = function(Value)
        _G.JumpPower = Value
    end,
})

-- Helper function to set jump power (or jump height) like Infinite Yield
local function setJumpPower(jpower)
    local char = player.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum and type(jpower) == "number" then
            if hum.UseJumpPower then
                hum.JumpPower = jpower
            else
                hum.JumpHeight = jpower
            end
        end
    end
end

-- Continuous update loop using Heartbeat to update WalkSpeed and JumpPower
RunService.Heartbeat:Connect(function()
    local char = player.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.WalkSpeed = _G.WalkSpeed
            setJumpPower(_G.JumpPower)
        end
    end
end)
